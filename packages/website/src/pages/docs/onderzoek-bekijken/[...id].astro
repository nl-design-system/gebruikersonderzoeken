---
import { ThemeList } from '@components/theme-list/theme-list.tsx';
import CenterColumnLayout from '@layouts/center-column.astro';
import { Heading } from '@nl-design-system-candidate/heading-react';
import { BodyCopy } from '@nl-design-system-community/ma-components/local/body-copy/body-copy';
import {
  DataSummary,
  type DataSummaryItem,
} from '@nl-design-system-community/ma-components/local/data-summary/data-summary';
import { toCleanRoute } from '@utils/menu';
import { getCollection, render } from 'astro:content';
import { getEntries } from 'astro:content';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const onderzoeken = await getCollection('onderzoeken').then((onderzoeken) =>
    onderzoeken.map((onderzoek) => {
      const id = toCleanRoute(onderzoek.id);

      return {
        ...onderzoek,
        id,
      };
    }),
  );

  return onderzoeken.map((onderzoek) => ({
    params: { id: onderzoek.id },
    props: { onderzoek },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { onderzoek } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(onderzoek);
const cover = onderzoek.data.cover ?? remarkPluginFrontmatter['cover'];
const filePath = onderzoek.filePath;

let themes = await getEntries(onderzoek.data.themes || []);

/** Astro should do this check, but as of now, it does not. See https://github.com/withastro/astro/issues/13268 */
// @ts-expect-error - themes can contain an undefined value if a wrong value is provided
if (themes.includes(undefined)) {
  throw new Error(`The themes in ${onderzoek.id} contain an invalid value`);
}

function formatDate(date: unknown) {
  if (date instanceof Date) {
    const months = [
      'januari',
      'februari',
      'maart',
      'april',
      'mei',
      'juni',
      'juli',
      'augustus',
      'september',
      'oktober',
      'november',
      'december',
    ];
    return `${months[date.getMonth()]} ${date.getFullYear()}`;
  }
  return;
}

const dataSummary: DataSummaryItem[] = [
  { definition: formatDate(onderzoek.data.date), term: 'Datum onderzoek' },
  { definition: onderzoek.data.conducted_by, term: 'Uitgevoerd door' },
  { definition: onderzoek.data.type, term: 'Type onderzoek' },
  { definition: onderzoek.data.target_group, term: 'Doelgroep' },
];
---

<CenterColumnLayout canonical={Astro.url} title={onderzoek.data.title} cover={cover}>
  <BodyCopy large>
    <Heading level={1}>{onderzoek.data.title}</Heading>
    <DataSummary appearance="rows" items={dataSummary} />
    <Content />
    <hr class="utrecht-separator" />
    <ThemeList themes={themes} />
  </BodyCopy>
</CenterColumnLayout>
