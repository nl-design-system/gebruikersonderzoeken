---
import { TableOfContents, type TableOfContentsItem } from '@components/table-of-contents/table-of-contents';
import { ThemeList } from '@components/theme-list/theme-list.tsx';
import { DescriptionList } from '@gemeente-denhaag/descriptionlist';
import CenterColumnLayout from '@layouts/center-column.astro';
import { Heading } from '@nl-design-system-candidate/heading-react';
import { Paragraph } from '@nl-design-system-candidate/paragraph-react';
import { BodyCopy } from '@nl-design-system-community/ma-components/local/body-copy/body-copy';
import { toCleanRoute } from '@utils/to-clean-route.ts';
import { getCollection, render } from 'astro:content';
import { getEntries } from 'astro:content';
import '@gemeente-denhaag/descriptionlist/index.css';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const onderzoeken = await getCollection('onderzoeken').then((onderzoeken) =>
    onderzoeken.map((onderzoek) => {
      const id = toCleanRoute(onderzoek.id);

      return {
        ...onderzoek,
        id,
      };
    }),
  );

  return onderzoeken.map((onderzoek) => ({
    params: { id: onderzoek.id },
    props: { onderzoek },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { onderzoek } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(onderzoek);
const cover = onderzoek.data.cover ?? remarkPluginFrontmatter['cover'];

let themes = await getEntries(onderzoek.data.themes || []);

/** Astro should do this check, but as of now, it does not. See https://github.com/withastro/astro/issues/13268 */
// @ts-expect-error - themes can contain an undefined value if a wrong value is provided
if (themes.includes(undefined)) {
  throw new Error(`The themes in ${onderzoek.id} contain an invalid value`);
}

function formatDate(date: unknown) {
  if (date instanceof Date) {
    const months = [
      'januari',
      'februari',
      'maart',
      'april',
      'mei',
      'juni',
      'juli',
      'augustus',
      'september',
      'oktober',
      'november',
      'december',
    ];
    return `${months[date.getMonth()]} ${date.getFullYear()}`;
  }
  return;
}

const dataSummary = [
  { detail: formatDate(onderzoek.data.date_conducted), title: 'Datum onderzoek' },
  { detail: onderzoek.data.conducted_by, title: 'Uitgevoerd door' },
  { detail: onderzoek.data.type, title: 'Type onderzoek' },
  { detail: onderzoek.data.target_group, title: 'Doelgroep' },
]
  .filter((item) => item.detail)
  .map(({ detail, title }) => ({ detail: Array.isArray(detail) ? detail.join(', ') : detail, title }));

const tocItems: TableOfContentsItem[] = headings
  .filter((heading) => heading.depth === 2)
  .map((heading) => ({ href: `#${heading.slug}`, label: heading.text }));
---

<CenterColumnLayout canonical={Astro.url} title={onderzoek.data.title} cover={cover}>
  <BodyCopy large>
    <Heading level={1}>{onderzoek.data.title}</Heading>

    <!-- marked up so algolia can find it -->
    {
      onderzoek.data.summary && (
        <Paragraph purpose="lead">
          <span class="ma-onderzoek-summary-title">Samengevat</span>:
          <span class="ma-onderzoek-summary-content">{onderzoek.data.summary}</span>
        </Paragraph>
      )
    }
    <DescriptionList items={dataSummary} />
    <TableOfContents items={tocItems} />
    <Content />
    <hr class="utrecht-separator" />
    <ThemeList themes={themes} />
  </BodyCopy>
</CenterColumnLayout>
